generator <- "normal"
r_mat <- matrix(nrow = 100, ncol = 3)  # All r(k) values for 3 different n values
for (j in 1:3) {
n <- n_range[j]
r_n <- matrix(nrow = 100, ncol = 3)  # Matrix of r(k) values with a particular n
for (i in 1:3) {
seedno = seed_range[i]
folder <- paste(generator, "_seed", seedno, "/", sep = "")
file <- paste("dist_", distno, "_n_", n, sep = "")
filename <- paste(path, folder, file, ".csv", sep = "")
r_n[,i] <- read.csv(file = filename, header = F)[,1]
}
r_mat[,j] <- rowMeans(r_n)
}
dist_fcn <- "Euclidean Distance"
if (distno == 1) {
dist_fcn <- "Cityblock Distance"
} else if (distno == 2) {
dist_fcn <- "Minkowski Distance (p = 3)"
} else if (distno == 3) {
dist_fcn <- "Distance Function in Problem 4"
} else if (distno == 4) {
dist_fcn <- "Cosine Distance"
}
filename <- paste(path, generator, "_dist_", distno, ".pdf", sep = "")
pdf(file = filename, width = 8, height = 6)
plot_title <- paste("r(k) Values with ", dist_fcn, sep = "")
plot(r_mat[,1],
main = plot_title,
xlab = "k",
ylab = "r(k)",
type = "l", col = "darkgreen", lwd = 2)
points(r_mat[,2],
type = "l", col = "orange", lwd = 2)
points(r_mat[,3],
type = "l", col = "steelblue2", lwd = 2)
legend(75, 4.5,
lty = 1, lwd = 3,
col = c("darkgreen", "orange", "steelblue2"),
c("n = 100", "n = 1000", "n = 10000"))
dev.off()
(66.9811 + 66.0377 + 70.7547 + 62.2641 + 64.1509) / 5
(90.2857 + 87.4285 + 86.2857 + 89.7142 + 92.5714) / 5
(70.7774 + 68.3646 + 72.1179 + 69.9731 + 69.7050) / 5
matrix(c(67.9245,89.1428,71.8498,65.0943,88.5714,69.1689,357.5471,89.7142,70.5093,465.0943,88.5714,68.9008,575.4716,92.5714,71.0455),
ncol = 3)
a = matrix(c(67.9245,89.1428,71.8498,65.0943,88.5714,69.1689,357.5471,89.7142,70.5093,465.0943,88.5714,68.9008,575.4716,92.5714,71.0455),
ncol = 3, byrow = T)
a
a = matrix(c(67.9245,89.1428,71.8498,65.0943,88.5714,69.1689,57.5471,89.7142,70.5093,65.0943,88.5714,68.9008,75.4716,92.5714,71.0455),
ncol = 3, byrow = T)
a
colMeans(a)
setwd("/Users/chuckjia/Documents/Workspace/Git/B565-DataMining/B565HW2Prob3"); rm(list = ls()); cat("\014")
dset <- read.csv("glass.csv", header = F)
dset <- read.csv("glass.csv", header = F)
dset[,1:ncol(dset)-1]
dset[,ncol(dset)]
table(true_labels)
true_labels <- dset[,ncol(dset)]
table(true_labels)
array(table(true_labels))
array(table(true_labels)) / length(true_labels)
uniq(true_labels)
unique(true_labels)
array(table(true_labels))
table(true_labels)
dset[sample(nrow(dset)),]
true_labels <- dset[,ncol(dset)]
unique(true_labels)
array(table(true_labels))
table(true_labels)
rand_guess_labels = sample(unique(true_labels), size = nrow(dset), replace = T, prob = array(table(true_labels)) / length(true_labels))  #
sum(rand_guess_labels == true_labels)
1 - sum(rand_guess_labels == true_labels) / length(nrow(dset))
1 - sum(rand_guess_labels == true_labels) / length(nrow(dset))
1 - sum(rand_guess_labels == true_labels) / nrow(dset)
setwd("/Users/chuckjia/Documents/Workspace/Git/B565-DataMining/B565HW2Prob3"); rm(list = ls()); cat("\014")
# Read data set from file
filename <- "glass.csv"
dset <- read.csv(filename, header = F)
dset <- dset[sample(nrow(dset)),]  # Shuffle data points orders
true_labels <- dset[,ncol(dset)]
# Random guess
rand_guess_labels = sample(unique(true_labels), size = nrow(dset), replace = T, prob = array(table(true_labels)) / length(true_labels))  # Generate randomly guessed labels
err_rate <- 1 - sum(rand_guess_labels == true_labels) / nrow(dset)
cat("Random guess error rate = ", err_rate, "\n", sep = "")
setwd("/Users/chuckjia/Documents/Workspace/Git/B565-DataMining/B565HW2Prob3"); rm(list = ls()); cat("\014")
# Read data set from file
filename <- "glass.csv"
dset <- read.csv(filename, header = F)
dset <- dset[sample(nrow(dset)),]  # Shuffle data points orders
true_labels <- dset[,ncol(dset)]
# Random guess
rand_guess_labels = sample(unique(true_labels), size = nrow(dset), replace = T, prob = array(table(true_labels)) / length(true_labels))  # Generate randomly guessed labels
err_rate <- 1 - sum(rand_guess_labels == true_labels) / nrow(dset)
cat("Random guess error rate = ", err_rate, "\n", sep = "")
setwd("/Users/chuckjia/Documents/Workspace/Git/B565-DataMining/B565HW2Prob3"); rm(list = ls()); cat("\014")
# Read data set from file
filename <- "glass.csv"
dset <- read.csv(filename, header = F)
dset <- dset[sample(nrow(dset)),]  # Shuffle data points orders
true_labels <- dset[,ncol(dset)]
# Random guess
rand_guess_labels = sample(unique(true_labels), size = nrow(dset), replace = T, prob = array(table(true_labels)) / length(true_labels))  # Generate randomly guessed labels
err_rate <- 1 - sum(rand_guess_labels == true_labels) / nrow(dset)
cat("Random guess error rate = ", err_rate, "\n", sep = "")
setwd("/Users/chuckjia/Documents/Workspace/Git/B565-DataMining/B565HW2Prob3"); rm(list = ls()); cat("\014")
# Read data set from file
filename <- "glass.csv"
dset <- read.csv(filename, header = F)
dset <- dset[sample(nrow(dset)),]  # Shuffle data points orders
true_labels <- dset[,ncol(dset)]
# Random guess
rand_guess_labels = sample(unique(true_labels), size = nrow(dset), replace = T, prob = array(table(true_labels)) / length(true_labels))  # Generate randomly guessed labels
err_rate <- 1 - sum(rand_guess_labels == true_labels) / nrow(dset)
cat("Random guess error rate = ", err_rate, "\n", sep = "")
setwd("/Users/chuckjia/Documents/Workspace/Git/B565-DataMining/B565HW2Prob3"); rm(list = ls()); cat("\014")
# Read data set from file
filename <- "glass.csv"
dset <- read.csv(filename, header = F)
dset <- dset[sample(nrow(dset)),]  # Shuffle data points orders
true_labels <- dset[,ncol(dset)]
# Random guess
rand_guess_labels = sample(unique(true_labels), size = nrow(dset), replace = T, prob = array(table(true_labels)) / length(true_labels))  # Generate randomly guessed labels
err_rate <- 1 - sum(rand_guess_labels == true_labels) / nrow(dset)
cat("Random guess error rate = ", err_rate, "\n", sep = "")
setwd("/Users/chuckjia/Documents/Workspace/Git/B565-DataMining/B565HW2Prob3"); rm(list = ls()); cat("\014")
# Read data set from file
filename <- "glass.csv"
dset <- read.csv(filename, header = F)
dset <- dset[sample(nrow(dset)),]  # Shuffle data points orders
true_labels <- dset[,ncol(dset)]
# Random guess
rand_guess_labels = sample(unique(true_labels), size = nrow(dset), replace = T, prob = array(table(true_labels)) / length(true_labels))  # Generate randomly guessed labels
err_rate <- 1 - sum(rand_guess_labels == true_labels) / nrow(dset)
cat("Random guess error rate = ", err_rate, "\n", sep = "")
setwd("/Users/chuckjia/Documents/Workspace/Git/B565-DataMining/B565HW2Prob3"); rm(list = ls()); cat("\014")
# Read data set from file
filename <- "glass.csv"
dset <- read.csv(filename, header = F)
dset <- dset[sample(nrow(dset)),]  # Shuffle data points orders
true_labels <- dset[,ncol(dset)]
# Random guess
rand_guess_labels = sample(unique(true_labels), size = nrow(dset), replace = T, prob = array(table(true_labels)) / length(true_labels))  # Generate randomly guessed labels
err_rate <- 1 - sum(rand_guess_labels == true_labels) / nrow(dset)
cat("Random guess error rate = ", err_rate, "\n", sep = "")
setwd("/Users/chuckjia/Documents/Workspace/Git/B565-DataMining/B565HW2Prob3"); rm(list = ls()); cat("\014")
# Read data set from file
filename <- "glass.csv"
dset <- read.csv(filename, header = F)
dset <- dset[sample(nrow(dset)),]  # Shuffle data points orders
true_labels <- dset[,ncol(dset)]
# Random guess
rand_guess_labels = sample(unique(true_labels), size = nrow(dset), replace = T, prob = array(table(true_labels)) / length(true_labels))  # Generate randomly guessed labels
err_rate <- 1 - sum(rand_guess_labels == true_labels) / nrow(dset)
cat("Random guess error rate = ", err_rate, "\n", sep = "")
setwd("/Users/chuckjia/Documents/Workspace/Git/B565-DataMining/B565HW2Prob3"); rm(list = ls()); cat("\014")
# Read data set from file
filename <- "glass.csv"
dset <- read.csv(filename, header = F)
dset <- dset[sample(nrow(dset)),]  # Shuffle data points orders
true_labels <- dset[,ncol(dset)]
# Random guess
rand_guess_labels = sample(unique(true_labels), size = nrow(dset), replace = T, prob = array(table(true_labels)) / length(true_labels))  # Generate randomly guessed labels
err_rate <- 1 - sum(rand_guess_labels == true_labels) / nrow(dset)
cat("Random guess error rate = ", err_rate, "\n", sep = "")
setwd("/Users/chuckjia/Documents/Workspace/Git/B565-DataMining/B565HW2Prob3"); rm(list = ls()); cat("\014")
# Read data set from file
filename <- "glass.csv"
dset <- read.csv(filename, header = F)
dset <- dset[sample(nrow(dset)),]  # Shuffle data points orders
true_labels <- dset[,ncol(dset)]
# Random guess
rand_guess_labels = sample(unique(true_labels), size = nrow(dset), replace = T, prob = array(table(true_labels)) / length(true_labels))  # Generate randomly guessed labels
err_rate <- 1 - sum(rand_guess_labels == true_labels) / nrow(dset)
cat("Random guess error rate = ", err_rate, "\n", sep = "")
setwd("/Users/chuckjia/Documents/Workspace/Git/B565-DataMining/B565HW2Prob3"); rm(list = ls()); cat("\014")
# Read data set from file
filename <- "glass.csv"
dset <- read.csv(filename, header = F)
dset <- dset[sample(nrow(dset)),]  # Shuffle data points orders
true_labels <- dset[,ncol(dset)]
# Random guess
rand_guess_labels = sample(unique(true_labels), size = nrow(dset), replace = T, prob = array(table(true_labels)) / length(true_labels))  # Generate randomly guessed labels
err_rate <- 1 - sum(rand_guess_labels == true_labels) / nrow(dset)
cat("Random guess error rate = ", err_rate, "\n", sep = "")
setwd("/Users/chuckjia/Documents/Workspace/Git/B565-DataMining/B565HW2Prob3"); rm(list = ls()); cat("\014")
# Read data set from file
filename <- "glass.csv"
dset <- read.csv(filename, header = F)
dset <- dset[sample(nrow(dset)),]  # Shuffle data points orders
true_labels <- dset[,ncol(dset)]
# Random guess
rand_guess_labels = sample(unique(true_labels), size = nrow(dset), replace = T, prob = array(table(true_labels)) / length(true_labels))  # Generate randomly guessed labels
err_rate <- 1 - sum(rand_guess_labels == true_labels) / nrow(dset)
cat("Random guess error rate = ", err_rate, "\n", sep = "")
setwd("/Users/chuckjia/Documents/Workspace/Git/B565-DataMining/B565HW2Prob3"); rm(list = ls()); cat("\014")
# Read data set from file
filename <- "glass.csv"
dset <- read.csv(filename, header = F)
dset <- dset[sample(nrow(dset)),]  # Shuffle data points orders
true_labels <- dset[,ncol(dset)]
# Random guess
rand_guess_labels = sample(unique(true_labels), size = nrow(dset), replace = T, prob = array(table(true_labels)) / length(true_labels))  # Generate randomly guessed labels
err_rate <- 1 - sum(rand_guess_labels == true_labels) / nrow(dset)
cat("Random guess error rate = ", err_rate, "\n", sep = "")
setwd("/Users/chuckjia/Documents/Workspace/Git/B565-DataMining/B565HW2Prob3"); rm(list = ls()); cat("\014")
# Read data set from file
filename <- "glass.csv"
dset <- read.csv(filename, header = F)
dset <- dset[sample(nrow(dset)),]  # Shuffle data points orders
true_labels <- dset[,ncol(dset)]
# Random guess
rand_guess_labels = sample(unique(true_labels), size = nrow(dset), replace = T, prob = array(table(true_labels)) / length(true_labels))  # Generate randomly guessed labels
err_rate <- 1 - sum(rand_guess_labels == true_labels) / nrow(dset)
cat("Random guess error rate = ", err_rate, "\n", sep = "")
setwd("/Users/chuckjia/Documents/Workspace/Git/B565-DataMining/B565HW2Prob3"); rm(list = ls()); cat("\014")
# Read data set from file
filename <- "glass.csv"
dset <- read.csv(filename, header = F)
dset <- dset[sample(nrow(dset)),]  # Shuffle data points orders
true_labels <- dset[,ncol(dset)]
# Random guess
rand_guess_labels = sample(unique(true_labels), size = nrow(dset), replace = T, prob = array(table(true_labels)) / length(true_labels))  # Generate randomly guessed labels
err_rate <- 1 - sum(rand_guess_labels == true_labels) / nrow(dset)
cat("Random guess error rate = ", err_rate, "\n", sep = "")
setwd("/Users/chuckjia/Documents/Workspace/Git/B565-DataMining/B565HW2Prob3"); rm(list = ls()); cat("\014")
# Read data set from file
filename <- "glass.csv"
dset <- read.csv(filename, header = F)
dset <- dset[sample(nrow(dset)),]  # Shuffle data points orders
true_labels <- dset[,ncol(dset)]
# Random guess
rand_guess_labels = sample(unique(true_labels), size = nrow(dset), replace = T, prob = array(table(true_labels)) / length(true_labels))  # Generate randomly guessed labels
err_rate <- 1 - sum(rand_guess_labels == true_labels) / nrow(dset)
cat("Random guess error rate = ", err_rate, "\n", sep = "")
setwd("/Users/chuckjia/Documents/Workspace/Git/B565-DataMining/B565HW2Prob3"); rm(list = ls()); cat("\014")
# Read data set from file
filename <- "glass.csv"
dset <- read.csv(filename, header = F)
dset <- dset[sample(nrow(dset)),]  # Shuffle data points orders
true_labels <- dset[,ncol(dset)]
# Random guess
rand_guess_labels = sample(unique(true_labels), size = nrow(dset), replace = T, prob = array(table(true_labels)) / length(true_labels))  # Generate randomly guessed labels
err_rate <- 1 - sum(rand_guess_labels == true_labels) / nrow(dset)
cat("Random guess error rate = ", err_rate, "\n", sep = "")
1/7
setwd("/Users/chuckjia/Documents/Workspace/Git/B565-DataMining/B565HW2Prob3"); rm(list = ls()); cat("\014")
# Read data set from file
filename <- "glass.csv"
dset <- read.csv(filename, header = F)
# dset <- dset[sample(nrow(dset)),]  # Shuffle data points orders
true_labels <- dset[,ncol(dset)]
dset <- dset[,1:(ncol(dset)-1)]
# R built in kmeans
res <- kmeans(dset, centers = 10, nstart = 1)
res
res$cluster
?mode
?Mode
?modal
?modal
sort(table(true_labels[clust_pts]))
for (k in 1:nclust) {
clust_pts = res$cluster == k
sort(table(true_labels[clust_pts]))
}
# R built in kmeans
nclust = 10
res <- kmeans(dset, centers = nclust, nstart = 1)
k = 1
clust_pts = res$cluster == k
sort(table(true_labels[clust_pts]))
sort(table(true_labels[clust_pts]), decreasing = T)
names(sort(table(true_labels[clust_pts]), decreasing = T))[1]
as.numeric(names(sort(table(true_labels[clust_pts]), decreasing = T))[1])
rkmeans_labels <- array(0, nrow(dset))
rkmeans_labels
rkmeans_labels <- array(0, nrow(dset))
for (k in 1:nclust) {
clust_pts <- res$cluster == k
rkmeans_labels[clust_pts] <- as.numeric(names(sort(table(true_labels[clust_pts]), decreasing = T))[1])
}
sum(rkmeans_labels == true_labels) / nrow(dset)
setwd("/Users/chuckjia/Documents/Workspace/Git/B565-DataMining/B565HW2Prob3"); rm(list = ls()); cat("\014")
# Read data set from file
filename <- "glass.csv"
dset <- read.csv(filename, header = F)
# dset <- dset[sample(nrow(dset)),]  # Shuffle data points orders
true_labels <- dset[,ncol(dset)]
dset <- dset[,1:(ncol(dset)-1)]
# R built in kmeans
nclust = 10
res <- kmeans(dset, centers = nclust, nstart = 1)
rkmeans_labels <- array(0, nrow(dset))
for (k in 1:nclust) {
clust_pts <- res$cluster == k
rkmeans_labels[clust_pts] <- as.numeric(names(sort(table(true_labels[clust_pts]), decreasing = T))[1])
}
err_rate <- 1 - sum(rkmeans_labels == true_labels) / nrow(dset)
cat("R built in error rate = ", err_rate, "\n", sep = "")
# R built in kmeans
nclust = 10
res <- kmeans(dset, centers = nclust, nstart = 1)
rkmeans_labels <- array(0, nrow(dset))
for (k in 1:nclust) {
clust_pts <- res$cluster == k
rkmeans_labels[clust_pts] <- as.numeric(names(sort(table(true_labels[clust_pts]), decreasing = T))[1])
}
err_rate <- 1 - sum(rkmeans_labels == true_labels) / nrow(dset)
cat("R built in error rate = ", err_rate, "\n", sep = "")
# R built in kmeans
nclust = 10
res <- kmeans(dset, centers = nclust, nstart = 1)
rkmeans_labels <- array(0, nrow(dset))
for (k in 1:nclust) {
clust_pts <- res$cluster == k
rkmeans_labels[clust_pts] <- as.numeric(names(sort(table(true_labels[clust_pts]), decreasing = T))[1])
}
err_rate <- 1 - sum(rkmeans_labels == true_labels) / nrow(dset)
cat("R built in error rate = ", err_rate, "\n", sep = "")
# R built in kmeans
nclust = 10
res <- kmeans(dset, centers = nclust, nstart = 1)
rkmeans_labels <- array(0, nrow(dset))
for (k in 1:nclust) {
clust_pts <- res$cluster == k
rkmeans_labels[clust_pts] <- as.numeric(names(sort(table(true_labels[clust_pts]), decreasing = T))[1])
}
err_rate <- 1 - sum(rkmeans_labels == true_labels) / nrow(dset)
cat("R built in error rate = ", err_rate, "\n", sep = "")
# R built in kmeans
nclust = 10
res <- kmeans(dset, centers = nclust, nstart = 1)
rkmeans_labels <- array(0, nrow(dset))
for (k in 1:nclust) {
clust_pts <- res$cluster == k
rkmeans_labels[clust_pts] <- as.numeric(names(sort(table(true_labels[clust_pts]), decreasing = T))[1])
}
err_rate <- 1 - sum(rkmeans_labels == true_labels) / nrow(dset)
cat("R built in error rate = ", err_rate, "\n", sep = "")
# R built in kmeans
nclust = 10
res <- kmeans(dset, centers = nclust, nstart = 1)
rkmeans_labels <- array(0, nrow(dset))
for (k in 1:nclust) {
clust_pts <- res$cluster == k
rkmeans_labels[clust_pts] <- as.numeric(names(sort(table(true_labels[clust_pts]), decreasing = T))[1])
}
err_rate <- 1 - sum(rkmeans_labels == true_labels) / nrow(dset)
cat("R built in error rate = ", err_rate, "\n", sep = "")
# R built in kmeans
nclust = 10
res <- kmeans(dset, centers = nclust, nstart = 1)
rkmeans_labels <- array(0, nrow(dset))
for (k in 1:nclust) {
clust_pts <- res$cluster == k
rkmeans_labels[clust_pts] <- as.numeric(names(sort(table(true_labels[clust_pts]), decreasing = T))[1])
}
err_rate <- 1 - sum(rkmeans_labels == true_labels) / nrow(dset)
cat("R built in error rate = ", err_rate, "\n", sep = "")
# R built in kmeans
nclust = 10
res <- kmeans(dset, centers = nclust, nstart = 1)
rkmeans_labels <- array(0, nrow(dset))
for (k in 1:nclust) {
clust_pts <- res$cluster == k
rkmeans_labels[clust_pts] <- as.numeric(names(sort(table(true_labels[clust_pts]), decreasing = T))[1])
}
err_rate <- 1 - sum(rkmeans_labels == true_labels) / nrow(dset)
cat("R built in error rate = ", err_rate, "\n", sep = "")
# R built in kmeans
nclust = 10
res <- kmeans(dset, centers = nclust, nstart = 1)
rkmeans_labels <- array(0, nrow(dset))
for (k in 1:nclust) {
clust_pts <- res$cluster == k
rkmeans_labels[clust_pts] <- as.numeric(names(sort(table(true_labels[clust_pts]), decreasing = T))[1])
}
err_rate <- 1 - sum(rkmeans_labels == true_labels) / nrow(dset)
cat("R built in error rate = ", err_rate, "\n", sep = "")
# R built in kmeans
nclust = 10
res <- kmeans(dset, centers = nclust, nstart = 1)
rkmeans_labels <- array(0, nrow(dset))
for (k in 1:nclust) {
clust_pts <- res$cluster == k
rkmeans_labels[clust_pts] <- as.numeric(names(sort(table(true_labels[clust_pts]), decreasing = T))[1])
}
err_rate <- 1 - sum(rkmeans_labels == true_labels) / nrow(dset)
cat("R built in error rate = ", err_rate, "\n", sep = "")
# R built in kmeans
nclust = 10
res <- kmeans(dset, centers = nclust, nstart = 1)
rkmeans_labels <- array(0, nrow(dset))
for (k in 1:nclust) {
clust_pts <- res$cluster == k
rkmeans_labels[clust_pts] <- as.numeric(names(sort(table(true_labels[clust_pts]), decreasing = T))[1])
}
err_rate <- 1 - sum(rkmeans_labels == true_labels) / nrow(dset)
cat("R built in error rate = ", err_rate, "\n", sep = "")
# R built in kmeans
nclust = 10
res <- kmeans(dset, centers = nclust, nstart = 1)
rkmeans_labels <- array(0, nrow(dset))
for (k in 1:nclust) {
clust_pts <- res$cluster == k
rkmeans_labels[clust_pts] <- as.numeric(names(sort(table(true_labels[clust_pts]), decreasing = T))[1])
}
err_rate <- 1 - sum(rkmeans_labels == true_labels) / nrow(dset)
cat("R built in error rate = ", err_rate, "\n", sep = "")
# R built in kmeans
nclust = 10
res <- kmeans(dset, centers = nclust, nstart = 1)
rkmeans_labels <- array(0, nrow(dset))
for (k in 1:nclust) {
clust_pts <- res$cluster == k
rkmeans_labels[clust_pts] <- as.numeric(names(sort(table(true_labels[clust_pts]), decreasing = T))[1])
}
err_rate <- 1 - sum(rkmeans_labels == true_labels) / nrow(dset)
cat("R built in error rate = ", err_rate, "\n", sep = "")
# R built in kmeans
nclust = 10
res <- kmeans(dset, centers = nclust, nstart = 1)
rkmeans_labels <- array(0, nrow(dset))
for (k in 1:nclust) {
clust_pts <- res$cluster == k
rkmeans_labels[clust_pts] <- as.numeric(names(sort(table(true_labels[clust_pts]), decreasing = T))[1])
}
err_rate <- 1 - sum(rkmeans_labels == true_labels) / nrow(dset)
cat("R built in error rate = ", round(err_rate * 100, 4), "%\n", sep = "")
# R built in kmeans
nclust = 10
res <- kmeans(dset, centers = nclust, nstart = 1)
rkmeans_labels <- array(0, nrow(dset))
for (k in 1:nclust) {
clust_pts <- res$cluster == k
rkmeans_labels[clust_pts] <- as.numeric(names(sort(table(true_labels[clust_pts]), decreasing = T))[1])
}
err_rate <- 1 - sum(rkmeans_labels == true_labels) / nrow(dset)
cat("R built in error rate = ", round(err_rate * 100, 4), "%\n", sep = "")
# R built in kmeans
nclust = 10
res <- kmeans(dset, centers = nclust, nstart = 1)
rkmeans_labels <- array(0, nrow(dset))
for (k in 1:nclust) {
clust_pts <- res$cluster == k
rkmeans_labels[clust_pts] <- as.numeric(names(sort(table(true_labels[clust_pts]), decreasing = T))[1])
}
err_rate <- 1 - sum(rkmeans_labels == true_labels) / nrow(dset)
cat("R built in error rate = ", round(err_rate * 100, 4), "%\n", sep = "")
# R built in kmeans
nclust = 10
res <- kmeans(dset, centers = nclust, nstart = 1)
rkmeans_labels <- array(0, nrow(dset))
for (k in 1:nclust) {
clust_pts <- res$cluster == k
rkmeans_labels[clust_pts] <- as.numeric(names(sort(table(true_labels[clust_pts]), decreasing = T))[1])
}
err_rate <- 1 - sum(rkmeans_labels == true_labels) / nrow(dset)
cat("R built in error rate = ", round(err_rate * 100, 4), "%\n", sep = "")
# R built in kmeans
nclust = 10
res <- kmeans(dset, centers = nclust, nstart = 1)
rkmeans_labels <- array(0, nrow(dset))
for (k in 1:nclust) {
clust_pts <- res$cluster == k
rkmeans_labels[clust_pts] <- as.numeric(names(sort(table(true_labels[clust_pts]), decreasing = T))[1])
}
err_rate <- 1 - sum(rkmeans_labels == true_labels) / nrow(dset)
cat("R built in error rate = ", round(err_rate * 100, 4), "%\n", sep = "")
# R built in kmeans
nclust = 10
res <- kmeans(dset, centers = nclust, nstart = 1)
rkmeans_labels <- array(0, nrow(dset))
for (k in 1:nclust) {
clust_pts <- res$cluster == k
rkmeans_labels[clust_pts] <- as.numeric(names(sort(table(true_labels[clust_pts]), decreasing = T))[1])
}
err_rate <- 1 - sum(rkmeans_labels == true_labels) / nrow(dset)
cat("R built in error rate = ", round(err_rate * 100, 4), "%\n", sep = "")
# R built in kmeans
nclust = 10
res <- kmeans(dset, centers = nclust, nstart = 1)
rkmeans_labels <- array(0, nrow(dset))
for (k in 1:nclust) {
clust_pts <- res$cluster == k
rkmeans_labels[clust_pts] <- as.numeric(names(sort(table(true_labels[clust_pts]), decreasing = T))[1])
}
err_rate <- 1 - sum(rkmeans_labels == true_labels) / nrow(dset)
cat("R built in error rate = ", round(err_rate * 100, 4), "%\n", sep = "")
# R built in kmeans
nclust = 10
res <- kmeans(dset, centers = nclust, nstart = 1)
rkmeans_labels <- array(0, nrow(dset))
for (k in 1:nclust) {
clust_pts <- res$cluster == k
rkmeans_labels[clust_pts] <- as.numeric(names(sort(table(true_labels[clust_pts]), decreasing = T))[1])
}
err_rate <- 1 - sum(rkmeans_labels == true_labels) / nrow(dset)
cat("R built in error rate = ", round(err_rate * 100, 4), "%\n", sep = "")
# R built in kmeans
nclust = 10
res <- kmeans(dset, centers = nclust, nstart = 1)
rkmeans_labels <- array(0, nrow(dset))
for (k in 1:nclust) {
clust_pts <- res$cluster == k
rkmeans_labels[clust_pts] <- as.numeric(names(sort(table(true_labels[clust_pts]), decreasing = T))[1])
}
err_rate <- 1 - sum(rkmeans_labels == true_labels) / nrow(dset)
cat("R built in error rate = ", round(err_rate * 100, 4), "%\n", sep = "")
