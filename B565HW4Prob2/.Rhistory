n <- n_range[j]
r_n <- matrix(nrow = 100, ncol = 3)  # Matrix of r(k) values with a particular n
for (i in 1:3) {
seedno = seed_range[i]
folder <- paste(generator, "_seed", seedno, "/", sep = "")
file <- paste("dist_", distno, "_n_", n, sep = "")
filename <- paste(path, folder, file, ".csv", sep = "")
r_n[,i] <- read.csv(file = filename, header = F)[,1]
}
r_mat[,j] <- rowMeans(r_n)
}
dist_fcn <- "Euclidean Distance"
if (distno == 1) {
dist_fcn <- "Cityblock Distance"
} else if (distno == 2) {
dist_fcn <- "Minkowski Distance (p = 3)"
} else if (distno == 3) {
dist_fcn <- "Distance Function in Problem 4"
} else if (distno == 4) {
dist_fcn <- "Cosine Distance"
}
filename <- paste(path, generator, "_dist_", distno, ".pdf", sep = "")
pdf(file = filename, width = 8, height = 6)
plot_title <- paste("r(k) Values with ", dist_fcn, sep = "")
plot(r_mat[,1],
main = plot_title,
xlab = "k",
ylab = "r(k)",
type = "l", col = "darkgreen", lwd = 2)
points(r_mat[,2],
type = "l", col = "orange", lwd = 2)
points(r_mat[,3],
type = "l", col = "steelblue2", lwd = 2)
legend(75, 4.5,
lty = 1, lwd = 3,
col = c("darkgreen", "orange", "steelblue2"),
c("n = 100", "n = 1000", "n = 10000"))
dev.off()
rm(list = ls())
path = "/Users/chuckjia/Documents/Workspace/Eclipse/JIASpace/B565HW1/Results/"
seed_range = c(2, 200, 10000)
n_range <- c(100, 1000, 10000)
distno <- 5
generator <- "normal"
r_mat <- matrix(nrow = 100, ncol = 3)  # All r(k) values for 3 different n values
for (j in 1:3) {
n <- n_range[j]
r_n <- matrix(nrow = 100, ncol = 3)  # Matrix of r(k) values with a particular n
for (i in 1:3) {
seedno = seed_range[i]
folder <- paste(generator, "_seed", seedno, "/", sep = "")
file <- paste("dist_", distno, "_n_", n, sep = "")
filename <- paste(path, folder, file, ".csv", sep = "")
r_n[,i] <- read.csv(file = filename, header = F)[,1]
}
r_mat[,j] <- rowMeans(r_n)
}
dist_fcn <- "Euclidean Distance"
if (distno == 1) {
dist_fcn <- "Cityblock Distance"
} else if (distno == 2) {
dist_fcn <- "Minkowski Distance (p = 3)"
} else if (distno == 3) {
dist_fcn <- "Distance Function in Problem 4"
} else if (distno == 4) {
dist_fcn <- "Cosine Distance"
}
filename <- paste(path, generator, "_dist_", distno, ".pdf", sep = "")
pdf(file = filename, width = 8, height = 6)
plot_title <- paste("r(k) Values with ", dist_fcn, sep = "")
plot(r_mat[,1],
main = plot_title,
xlab = "k",
ylab = "r(k)",
type = "l", col = "darkgreen", lwd = 2)
points(r_mat[,2],
type = "l", col = "orange", lwd = 2)
points(r_mat[,3],
type = "l", col = "steelblue2", lwd = 2)
legend(75, 4.5,
lty = 1, lwd = 3,
col = c("darkgreen", "orange", "steelblue2"),
c("n = 100", "n = 1000", "n = 10000"))
dev.off()
rm(list = ls())
path = "/Users/chuckjia/Documents/Workspace/Eclipse/JIASpace/B565HW1/Results/"
seed_range = c(2, 200, 10000)
n_range <- c(100, 1000, 10000)
distno <- 5
generator <- "normal"
r_mat <- matrix(nrow = 100, ncol = 3)  # All r(k) values for 3 different n values
for (j in 1:3) {
n <- n_range[j]
r_n <- matrix(nrow = 100, ncol = 3)  # Matrix of r(k) values with a particular n
for (i in 1:3) {
seedno = seed_range[i]
folder <- paste(generator, "_seed", seedno, "/", sep = "")
file <- paste("dist_", distno, "_n_", n, sep = "")
filename <- paste(path, folder, file, ".csv", sep = "")
r_n[,i] <- read.csv(file = filename, header = F)[,1]
}
r_mat[,j] <- rowMeans(r_n)
}
rm(list = ls())
path = "/Users/chuckjia/Documents/Workspace/Eclipse/JIASpace/B565HW1/Results/"
seed_range = c(2, 200, 10000)
n_range <- c(100, 1000, 10000)
distno <- 5
generator <- "normal"
r_mat <- matrix(nrow = 100, ncol = 3)  # All r(k) values for 3 different n values
for (j in 1:3) {
n <- n_range[j]
r_n <- matrix(nrow = 100, ncol = 3)  # Matrix of r(k) values with a particular n
for (i in 1:3) {
seedno = seed_range[i]
folder <- paste(generator, "_seed", seedno, "/", sep = "")
file <- paste("dist_", distno, "_n_", n, sep = "")
filename <- paste(path, folder, file, ".csv", sep = "")
r_n[,i] <- read.csv(file = filename, header = F)[,1]
}
r_mat[,j] <- rowMeans(r_n)
}
dist_fcn <- "Euclidean Distance"
if (distno == 1) {
dist_fcn <- "Cityblock Distance"
} else if (distno == 2) {
dist_fcn <- "Minkowski Distance (p = 3)"
} else if (distno == 3) {
dist_fcn <- "Distance Function in Problem 4"
} else if (distno == 4) {
dist_fcn <- "Cosine Distance"
}
filename <- paste(path, generator, "_dist_", distno, ".pdf", sep = "")
pdf(file = filename, width = 8, height = 6)
plot_title <- paste("r(k) Values with ", dist_fcn, sep = "")
plot(r_mat[,1],
main = plot_title,
xlab = "k",
ylab = "r(k)",
type = "l", col = "darkgreen", lwd = 2)
points(r_mat[,2],
type = "l", col = "orange", lwd = 2)
points(r_mat[,3],
type = "l", col = "steelblue2", lwd = 2)
legend(75, 4.5,
lty = 1, lwd = 3,
col = c("darkgreen", "orange", "steelblue2"),
c("n = 100", "n = 1000", "n = 10000"))
dev.off()
(66.9811 + 66.0377 + 70.7547 + 62.2641 + 64.1509) / 5
(90.2857 + 87.4285 + 86.2857 + 89.7142 + 92.5714) / 5
(70.7774 + 68.3646 + 72.1179 + 69.9731 + 69.7050) / 5
matrix(c(67.9245,89.1428,71.8498,65.0943,88.5714,69.1689,357.5471,89.7142,70.5093,465.0943,88.5714,68.9008,575.4716,92.5714,71.0455),
ncol = 3)
a = matrix(c(67.9245,89.1428,71.8498,65.0943,88.5714,69.1689,357.5471,89.7142,70.5093,465.0943,88.5714,68.9008,575.4716,92.5714,71.0455),
ncol = 3, byrow = T)
a
a = matrix(c(67.9245,89.1428,71.8498,65.0943,88.5714,69.1689,57.5471,89.7142,70.5093,65.0943,88.5714,68.9008,75.4716,92.5714,71.0455),
ncol = 3, byrow = T)
a
colMeans(a)
5.30 * 3 + 7.44 + 6.37 + 7.44 + 6.37 + 7.44
library(MASS)
diag(10)
rep(2)
rep(2, 2)
rep(2, 3)
mvrnorm(n = 10000, mu = rep(0, 300), Sigma = diag(10000))
mvrnorm(n = 10000, mu = rep(0, 300), Sigma = diag(300))
dset <- mvrnorm(n = 10000, mu = rep(0, 300), Sigma = diag(300))
library(MASS)
nrow <- 10000
ndim <- 300
dset <- mvrnorm(n = nrow, mu = rep(0, ndim), Sigma = diag(ndim))
dist_mat <- matrix(0, nrow = nrow, ncol = nrow)
?norm
dist_mat <- matrix(0, nrow = nrow, ncol = nrow)
for (i in 1:nrow)
for (j in 1:ncol) {
cat("Progress i = ", i, sep = "")
dist_mat[i, j] <- norm(dset[i,] - dset[j,], type = "2")
}
dset[i,]
library(MASS)
nrow <- 10000
ndim <- 300
dset <- mvrnorm(n = nrow, mu = rep(0, ndim), Sigma = diag(ndim))
dist_mat <- matrix(0, nrow = nrow, ncol = nrow)
for (i in 1:nrow)
for (j in 1:ncol) {
cat("Progress i = ", i, sep = "")
dist_mat[i, j] <- norm(dset[i,] - dset[j,], type = "2")
}
clc
cat("\014")
cat("\014")
for (i in 1:nrow)
for (j in 1:ncol) {
cat("Progress i = ", i, ", j = ", j, sep = "")
dist_mat[i, j] <- norm(dset[i,] - dset[j,], type = "2")
}
for (i in 1:nrow)
for (j in 1:nrow) {
cat("Progress i = ", i, ", j = ", j, sep = "")
dist_mat[i, j] <- norm(dset[i,] - dset[j,], type = "2")
}
dist_mat <- matrix(0, nrow = nrow, ncol = nrow)
for (i in 1:nrow) {
cat("Progress i = ", i, sep = "")
for (j in 1:nrow) {
dist_mat[i, j] <- norm(dset[i,] - dset[j,], type = "2")
}
}
cat("\014")
library(MASS)
nrow <- 5000
ndim <- 100
dset <- mvrnorm(n = nrow, mu = rep(0, ndim), Sigma = diag(ndim))
dist_mat <- matrix(0, nrow = nrow, ncol = nrow)
for (i in 1:nrow) {
cat("Progress i = ", i, sep = "")
for (j in 1:nrow) {
dist_mat[i, j] <- norm(dset[i,] - dset[j,], type = "2")
}
}
cat("\014")
library(MASS)
nrow <- 1000
ndim <- 100
dset <- mvrnorm(n = nrow, mu = rep(0, ndim), Sigma = diag(ndim))
dist_mat <- matrix(0, nrow = nrow, ncol = nrow)
for (i in 1:nrow) {
cat("Progress i = ", i, sep = "")
for (j in 1:nrow) {
dist_mat[i, j] <- norm(dset[i,] - dset[j,], type = "2")
}
}
fifth_largest <- array(0, dim = nrow)
fifth_largest
fifth_largest <- array(0, dim = nrow)
for (i in 1:nrow) {
cat("Progress i = ", i, "\n", sep = "")
fifth_largest[i] <- sort(dist_mat[i,])[5]
}
cat("\014")
library(MASS)
nrow <- 10
ndim <- 2
dset <- mvrnorm(n = nrow, mu = rep(0, ndim), Sigma = diag(ndim))
dist_mat <- as.matrix(dist(dset))
dist_mat
cat("\014")
library(MASS)
nrow <- 10000
ndim <- 300
dset <- mvrnorm(n = nrow, mu = rep(0, ndim), Sigma = diag(ndim))
dist_mat <- as.matrix(dist(dset))
fifth_largest <- array(0, dim = nrow)
for (i in 1:nrow) {
cat("Progress i = ", i, "\n", sep = "")
fifth_largest[i] <- sort(dist_mat[i,])[5]
}
isInNeighbor_mat <- matrix(F, nrow, nrow)
for (i in 1:nrow) {
isInNeighbor_mat[i,] <- dset[i,] <= fifth_largest[i]
}
for (i in 1:nrow) {
isInNeighbor_mat[i,] <- dist_mat[i,] <= fifth_largest[i]
}
N5 <- array(0, dim = nrow)
N5 <- array(0, dim = nrow)
for (j in 1:nrow)
N5(j) <- sum(isInNeighbor_mat[,j])
N5 <- array(0, dim = nrow)
for (j in 1:nrow)
N5[j] <- sum(isInNeighbor_mat[,j])
plot(N5)
hist(N5)
plot(table(N5))
plot(table(N5) / nrow)
c(1,2) * c(1,2)
dot(c(1,2),c(1,2))
cat("\014")
library(MASS)
nrow <- 1000
ndim <- 30
dset <- mvrnorm(n = nrow, mu = rep(0, ndim), Sigma = diag(ndim))
# dist_mat <- as.matrix(dist(dset))
dist_mat <- matrix(0, nrow = nrow, ncol = nrow)
for (i in nrow) {
cat(i, "\n")
for (j in nrow) {
x <- dset[i,];
y <- dset[j,];
dist_mat[i, j] <- sum(x * y) / (norm(x) * norm(y))
}
}
dset[j,]
dset[i,]
norm(x)
x
dist_mat[i, j] <- sum(x * y) / (norm(x, type = "2") * norm(y, type = "2"))
cat("\014")
library(MASS)
nrow <- 1000
ndim <- 30
dset <- mvrnorm(n = nrow, mu = rep(0, ndim), Sigma = diag(ndim))
# dist_mat <- as.matrix(dist(dset))
dist_mat <- matrix(0, nrow = nrow, ncol = nrow)
for (i in nrow) {
cat(i, "\n")
for (j in nrow) {
x <- dset[i,]
y <- dset[j,]
dist_mat[i, j] <- sum(x * y) / (norm(x, type = "2") * norm(y, type = "2"))
}
}
cat("\014")
library(MASS)
nrow <- 1000
ndim <- 30
dset <- mvrnorm(n = nrow, mu = rep(0, ndim), Sigma = diag(ndim))
# dist_mat <- as.matrix(dist(dset))
dist_mat <- matrix(0, nrow = nrow, ncol = nrow)
for (i in 1:nrow) {
cat(i, "\n")
for (j in 1:nrow) {
x <- dset[i,]
y <- dset[j,]
dist_mat[i, j] <- sum(x * y) / (norm(x, type = "2") * norm(y, type = "2"))
}
}
i % 10
mod(200, 10)
mod200 (200, 10)
200 %% 10
200 %% 9
cat("\014")
library(MASS)
nrow <- 1000
ndim <- 30
dset <- mvrnorm(n = nrow, mu = rep(0, ndim), Sigma = diag(ndim))
# dist_mat <- as.matrix(dist(dset))
dist_mat <- matrix(-1, nrow = nrow, ncol = nrow)
for (i in 1:nrow) {
if (i %% 10 == 0)
cat(i, "\n")
for (j in 1:nrow) {
if (dist_mat[i, j] < 0) {
x <- dset[i,]
y <- dset[j,]
dist_mat[i, j] <- sum(x * y) / (norm(x, type = "2") * norm(y, type = "2"))
dist_mat[j, i] <- dist_mat[i, j]
}
}
}
cat("\014")
library(MASS)
nrow <- 1000
ndim <- 30
dset <- mvrnorm(n = nrow, mu = rep(0, ndim), Sigma = diag(ndim))
# dist_mat <- as.matrix(dist(dset))
dist_mat <- matrix(-1, nrow = nrow, ncol = nrow)
for (i in 1:nrow) {
if (i %% 50 == 0)
cat(i, "\n")
for (j in 1:nrow) {
if (dist_mat[i, j] < 0) {
x <- dset[i,]
y <- dset[j,]
dist_mat[i, j] <- 1 - sum(x * y) / (norm(x, type = "2") * norm(y, type = "2"))
dist_mat[j, i] <- dist_mat[i, j]
}
}
}
fifth_largest <- array(0, dim = nrow)
for (i in 1:nrow) {
cat("Progress i = ", i, "\n", sep = "")
fifth_largest[i] <- sort(dist_mat[i,])[5]
}
isInNeighbor_mat <- matrix(F, nrow, nrow)
for (i in 1:nrow) {
isInNeighbor_mat[i,] <- dist_mat[i,] <= fifth_largest[i]
}
N5 <- array(0, dim = nrow)
for (j in 1:nrow)
N5[j] <- sum(isInNeighbor_mat[,j])
plot(table(N5) / nrow)
cat("\014")
library(MASS)
nrow <- 1000
ndim <- 30
dset <- mvrnorm(n = nrow, mu = rep(0, ndim), Sigma = diag(ndim))
dist_mat <- as.matrix(dist(dset))
fifth_largest <- array(0, dim = nrow)
for (i in 1:nrow) {
cat("Progress i = ", i, "\n", sep = "")
fifth_largest[i] <- sort(dist_mat[i,])[5]
}
isInNeighbor_mat <- matrix(F, nrow, nrow)
for (i in 1:nrow) {
isInNeighbor_mat[i,] <- dist_mat[i,] <= fifth_largest[i]
}
N5 <- array(0, dim = nrow)
for (j in 1:nrow)
N5[j] <- sum(isInNeighbor_mat[,j])
plot(table(N5) / nrow)
0.3/4*0.1
253+129+11
435+189+2
435+72
435+502
435+805+11
435+347+2
435+96
435+62
453+187+2
78+56+27+4
78+28+8+1
165-115
num_user <- 71567
i <- num_user - 1
prog <- (2 * num_user - i - 2) * (i + 1)
prog <- (2 * num_user - i - 2) * (i + 1) / (num_user * num_user)
i <- num_user -
prog <- (2 * num_user - i - 2) * (i + 1) / (num_user * num_user)
num_user <- 71567
i <- num_user
prog <- (2 * num_user - i - 2) * (i + 1) / (num_user * num_user)
prog
num_user <- 71567
i <- num_user + 100
prog <- (2 * num_user - i - 2) * (i + 1) / (num_user * num_user)
prog
num_user <- 71567
i <- num_user + 200
prog <- (2 * num_user - i - 2) * (i + 1) / (num_user * num_user)
prog
num_user <- 71567
i <- num_user + 2000
prog <- (2 * num_user - i - 2) * (i + 1) / (num_user * num_user)
prog
num_user <- 71567
i <- num_user + 2000
prog <- (2 * num_user - i - 2) * (i + 1) / (num_user * num_user)
prog
num_user <- 71567
i <- num_user + 1
prog <- (2 * num_user - i - 2) * (i + 1) / (num_user * num_user)
prog
num_user <- 71567
i <- 100001
prog <- (2 * num_user - i - 2) * (i + 1) / (num_user * num_user)
prog
num_user <- 69878
i <- 100001
prog <- (2 * num_user - i - 2) * (i + 1) / (num_user * num_user)
prog
num_user <- 69878
i <- 100001
prog <- (2 * num_user - i - 2) * (i + 1) / (num_user * num_user)
prog
num_user <- 69878
i <- 100001
prog <- (2 * num_user - i - 2) * (i + 1) / (num_user * num_user)
prog
num_user <- 69878
i <- 100001
prog <- (2 * num_user - i - 2) * (i + 1) / (num_user * num_user)
prog
num_user <- 69878
i <- 100001
prog <- (2 * num_user - i - 2) * (i + 1) / (num_user * num_user)
prog
num_user <- 69878
i <- 100001
prog <- (2 * num_user - i - 2) * (i + 1) / (num_user * num_user)
prog
22000/60
22000/60/60
1251-937
784-531
642-497
setwd("/Users/chuckjia/Documents/Workspace/Git/B565-DataMining/B565HW4Prob2")
rm(list = ls()); cat("\014")
genDummyVariable <- function(dset) {
allFeatNames <- names(dset)
numFeat <- ncol(dset)
new_dset <- data.frame(matrix(nrow = nrow(dset), ncol = 0))
newNames <- c()
for (j in 1:numFeat) {
origFeatName <- allFeatNames[j]
uniqVal <- unique(dset[,j])
for (featVal in uniqVal) {
newFeatName <- paste(origFeatName, "_", featVal, sep = "")
new_dset = cbind(new_dset, as.integer(dset[,j] == featVal))
newNames = c(newNames, newFeatName)
}
}
names(new_dset) = newNames
return(new_dset)
}
dset
# Nursery set
dset <- read.csv("data/nursery.data", header = F)
View(dset)
# Nursery set
dset <- read.csv("data/nursery.data", header = F)
names(dset) <- c("parents", "has_nurs", "form", "children", "housing", "finance", "social", "health", "admission")
new_dset <- genDummyVariable(dset)
write.table(new_dset, file = "data/nursery_dv.csv", row.names = F, col.names = F, sep = ",")
write.table(names(new_dset), file = "data/nursery_dv_names.csv", row.names = F, col.names = F, sep = ",")
